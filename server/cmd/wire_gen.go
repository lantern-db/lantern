// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/lantern-db/lantern/graph/cache"
	"github.com/lantern-db/lantern/graph/model"
	"github.com/lantern-db/lantern/server/service"
	"google.golang.org/grpc"
	"net"
)

// Injectors from wire.go:

func initializeLanternServer() (*service.LanternServer, error) {
	lanternServerConfig, err := model.LoadServerConfig()
	if err != nil {
		return nil, err
	}
	listener, err := newListener(lanternServerConfig)
	if err != nil {
		return nil, err
	}
	vertexCache := newVertexCache(lanternServerConfig)
	edgeCache := newEdgeCache(lanternServerConfig)
	graphCache := newGraphCache(vertexCache, edgeCache)
	lanternService := service.NewLanternService(graphCache)
	v := newGrpcServerOptions()
	server := grpc.NewServer(v...)
	lanternServer := newLanternServer(lanternServerConfig, listener, lanternService, server)
	return lanternServer, nil
}

// wire.go:

func newVertexCache(config *model.LanternServerConfig) *cache.VertexCache {
	return cache.NewVertexCache(config.Ttl)
}

func newEdgeCache(config *model.LanternServerConfig) *cache.EdgeCache {
	return cache.NewEdgeCache(config.Ttl)
}

func newGraphCache(v *cache.VertexCache, e *cache.EdgeCache) *cache.GraphCache {
	return cache.NewGraphCache(v, e)
}

func newListener(config *model.LanternServerConfig) (net.Listener, error) {
	return net.Listen("tcp", ":"+config.Port)
}

func newGrpcServerOptions() []grpc.ServerOption {
	return []grpc.ServerOption{}
}

func newLanternServer(config *model.LanternServerConfig, listener net.Listener, svc *service.LanternService, server *grpc.Server) *service.LanternServer {
	return service.NewLanternServer(config.FlushInterval, listener, svc, server)
}
