// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: lantern/v1/lantern.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanternServiceClient is the client API for LanternService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanternServiceClient interface {
	Illuminate(ctx context.Context, in *IlluminateRequest, opts ...grpc.CallOption) (*IlluminateResponse, error)
	GetVertex(ctx context.Context, in *GetVertexRequest, opts ...grpc.CallOption) (*GetVertexResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	PutVertex(ctx context.Context, in *PutVertexRequest, opts ...grpc.CallOption) (*PutVertexResponse, error)
	PutEdge(ctx context.Context, in *PutEdgeRequest, opts ...grpc.CallOption) (*PutEdgeResponse, error)
}

type lanternServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanternServiceClient(cc grpc.ClientConnInterface) LanternServiceClient {
	return &lanternServiceClient{cc}
}

func (c *lanternServiceClient) Illuminate(ctx context.Context, in *IlluminateRequest, opts ...grpc.CallOption) (*IlluminateResponse, error) {
	out := new(IlluminateResponse)
	err := c.cc.Invoke(ctx, "/lantern.v1.LanternService/Illuminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternServiceClient) GetVertex(ctx context.Context, in *GetVertexRequest, opts ...grpc.CallOption) (*GetVertexResponse, error) {
	out := new(GetVertexResponse)
	err := c.cc.Invoke(ctx, "/lantern.v1.LanternService/GetVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/lantern.v1.LanternService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternServiceClient) PutVertex(ctx context.Context, in *PutVertexRequest, opts ...grpc.CallOption) (*PutVertexResponse, error) {
	out := new(PutVertexResponse)
	err := c.cc.Invoke(ctx, "/lantern.v1.LanternService/PutVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternServiceClient) PutEdge(ctx context.Context, in *PutEdgeRequest, opts ...grpc.CallOption) (*PutEdgeResponse, error) {
	out := new(PutEdgeResponse)
	err := c.cc.Invoke(ctx, "/lantern.v1.LanternService/PutEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanternServiceServer is the server API for LanternService service.
// All implementations must embed UnimplementedLanternServiceServer
// for forward compatibility
type LanternServiceServer interface {
	Illuminate(context.Context, *IlluminateRequest) (*IlluminateResponse, error)
	GetVertex(context.Context, *GetVertexRequest) (*GetVertexResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	PutVertex(context.Context, *PutVertexRequest) (*PutVertexResponse, error)
	PutEdge(context.Context, *PutEdgeRequest) (*PutEdgeResponse, error)
	mustEmbedUnimplementedLanternServiceServer()
}

// UnimplementedLanternServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLanternServiceServer struct {
}

func (UnimplementedLanternServiceServer) Illuminate(context.Context, *IlluminateRequest) (*IlluminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Illuminate not implemented")
}
func (UnimplementedLanternServiceServer) GetVertex(context.Context, *GetVertexRequest) (*GetVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertex not implemented")
}
func (UnimplementedLanternServiceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLanternServiceServer) PutVertex(context.Context, *PutVertexRequest) (*PutVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutVertex not implemented")
}
func (UnimplementedLanternServiceServer) PutEdge(context.Context, *PutEdgeRequest) (*PutEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEdge not implemented")
}
func (UnimplementedLanternServiceServer) mustEmbedUnimplementedLanternServiceServer() {}

// UnsafeLanternServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanternServiceServer will
// result in compilation errors.
type UnsafeLanternServiceServer interface {
	mustEmbedUnimplementedLanternServiceServer()
}

func RegisterLanternServiceServer(s grpc.ServiceRegistrar, srv LanternServiceServer) {
	s.RegisterService(&LanternService_ServiceDesc, srv)
}

func _LanternService_Illuminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IlluminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServiceServer).Illuminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantern.v1.LanternService/Illuminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServiceServer).Illuminate(ctx, req.(*IlluminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanternService_GetVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServiceServer).GetVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantern.v1.LanternService/GetVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServiceServer).GetVertex(ctx, req.(*GetVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanternService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantern.v1.LanternService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanternService_PutVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServiceServer).PutVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantern.v1.LanternService/PutVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServiceServer).PutVertex(ctx, req.(*PutVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanternService_PutEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServiceServer).PutEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantern.v1.LanternService/PutEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServiceServer).PutEdge(ctx, req.(*PutEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanternService_ServiceDesc is the grpc.ServiceDesc for LanternService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanternService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lantern.v1.LanternService",
	HandlerType: (*LanternServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Illuminate",
			Handler:    _LanternService_Illuminate_Handler,
		},
		{
			MethodName: "GetVertex",
			Handler:    _LanternService_GetVertex_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _LanternService_Put_Handler,
		},
		{
			MethodName: "PutVertex",
			Handler:    _LanternService_PutVertex_Handler,
		},
		{
			MethodName: "PutEdge",
			Handler:    _LanternService_PutEdge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lantern/v1/lantern.proto",
}
