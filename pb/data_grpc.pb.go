// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanternClient is the client API for Lantern service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanternClient interface {
	Illuminate(ctx context.Context, in *IlluminateRequest, opts ...grpc.CallOption) (*IlluminateResponse, error)
	DumpVertex(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*DumpResponse, error)
	DumpEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*DumpResponse, error)
}

type lanternClient struct {
	cc grpc.ClientConnInterface
}

func NewLanternClient(cc grpc.ClientConnInterface) LanternClient {
	return &lanternClient{cc}
}

func (c *lanternClient) Illuminate(ctx context.Context, in *IlluminateRequest, opts ...grpc.CallOption) (*IlluminateResponse, error) {
	out := new(IlluminateResponse)
	err := c.cc.Invoke(ctx, "/Lantern/Illuminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternClient) DumpVertex(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*DumpResponse, error) {
	out := new(DumpResponse)
	err := c.cc.Invoke(ctx, "/Lantern/DumpVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lanternClient) DumpEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*DumpResponse, error) {
	out := new(DumpResponse)
	err := c.cc.Invoke(ctx, "/Lantern/DumpEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanternServer is the server API for Lantern service.
// All implementations must embed UnimplementedLanternServer
// for forward compatibility
type LanternServer interface {
	Illuminate(context.Context, *IlluminateRequest) (*IlluminateResponse, error)
	DumpVertex(context.Context, *Vertex) (*DumpResponse, error)
	DumpEdge(context.Context, *Edge) (*DumpResponse, error)
	mustEmbedUnimplementedLanternServer()
}

// UnimplementedLanternServer must be embedded to have forward compatible implementations.
type UnimplementedLanternServer struct {
}

func (UnimplementedLanternServer) Illuminate(context.Context, *IlluminateRequest) (*IlluminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Illuminate not implemented")
}
func (UnimplementedLanternServer) DumpVertex(context.Context, *Vertex) (*DumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpVertex not implemented")
}
func (UnimplementedLanternServer) DumpEdge(context.Context, *Edge) (*DumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpEdge not implemented")
}
func (UnimplementedLanternServer) mustEmbedUnimplementedLanternServer() {}

// UnsafeLanternServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanternServer will
// result in compilation errors.
type UnsafeLanternServer interface {
	mustEmbedUnimplementedLanternServer()
}

func RegisterLanternServer(s grpc.ServiceRegistrar, srv LanternServer) {
	s.RegisterService(&Lantern_ServiceDesc, srv)
}

func _Lantern_Illuminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IlluminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServer).Illuminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lantern/Illuminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServer).Illuminate(ctx, req.(*IlluminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lantern_DumpVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vertex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServer).DumpVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lantern/DumpVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServer).DumpVertex(ctx, req.(*Vertex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lantern_DumpEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanternServer).DumpEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lantern/DumpEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanternServer).DumpEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

// Lantern_ServiceDesc is the grpc.ServiceDesc for Lantern service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lantern_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Lantern",
	HandlerType: (*LanternServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Illuminate",
			Handler:    _Lantern_Illuminate_Handler,
		},
		{
			MethodName: "DumpVertex",
			Handler:    _Lantern_DumpVertex_Handler,
		},
		{
			MethodName: "DumpEdge",
			Handler:    _Lantern_DumpEdge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data.proto",
}
