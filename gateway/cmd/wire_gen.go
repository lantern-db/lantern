// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"flag"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/lantern-db/lantern/gateway/config"
	"github.com/lantern-db/lantern/gateway/service"
	config2 "github.com/lantern-db/lantern/monitor/config"
	service2 "github.com/lantern-db/lantern/monitor/service"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// Injectors from wire.go:

func initializeGrpcGatewayServer() (*service.GrpcGatewayServer, error) {
	gatewayConfig, err := config.LoadGatewayConfig()
	if err != nil {
		return nil, err
	}
	endpointString := newGrpcServerEndpoint(gatewayConfig)
	serveMux := newServeMux()
	v := newDialOptions()
	grpcGatewayServer := service.NewGrpcGatewayServer(endpointString, serveMux, v, gatewayConfig)
	return grpcGatewayServer, nil
}

func initializePrometheusService() (*service2.PrometheusService, error) {
	prometheusConfig, err := config2.LoadPrometheusConfig()
	if err != nil {
		return nil, err
	}
	prometheusService := service2.NewPrometheusService(prometheusConfig)
	return prometheusService, nil
}

// wire.go:

func newGrpcServerEndpoint(config3 *config.GatewayConfig) service.EndpointString {
	return flag.String("grpc-server-endpoint", config3.LanternHost+":"+config3.LanternPort, "gRPC server endpoint")
}

func newServeMux() *runtime.ServeMux {
	return runtime.NewServeMux()
}

func newDialOptions() []grpc.DialOption {
	return []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
}
