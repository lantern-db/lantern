// Code generated by MockGen. DO NOT EDIT.
// Source: ./graph/model/edge.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/lantern-db/lantern-proto/go/graph/v1"
	model "github.com/lantern-db/lantern/graph/model"
)

// MockEdge is a mock of Edge interface.
type MockEdge struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeMockRecorder
}

// MockEdgeMockRecorder is the mock recorder for MockEdge.
type MockEdgeMockRecorder struct {
	mock *MockEdge
}

// NewMockEdge creates a new mock instance.
func NewMockEdge(ctrl *gomock.Controller) *MockEdge {
	mock := &MockEdge{ctrl: ctrl}
	mock.recorder = &MockEdgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdge) EXPECT() *MockEdgeMockRecorder {
	return m.recorder
}

// AsProto mocks base method.
func (m *MockEdge) AsProto() *v1.Edge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsProto")
	ret0, _ := ret[0].(*v1.Edge)
	return ret0
}

// AsProto indicates an expected call of AsProto.
func (mr *MockEdgeMockRecorder) AsProto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsProto", reflect.TypeOf((*MockEdge)(nil).AsProto))
}

// Expiration mocks base method.
func (m *MockEdge) Expiration() model.Expiration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expiration")
	ret0, _ := ret[0].(model.Expiration)
	return ret0
}

// Expiration indicates an expected call of Expiration.
func (mr *MockEdgeMockRecorder) Expiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expiration", reflect.TypeOf((*MockEdge)(nil).Expiration))
}

// Head mocks base method.
func (m *MockEdge) Head() model.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(model.Key)
	return ret0
}

// Head indicates an expected call of Head.
func (mr *MockEdgeMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockEdge)(nil).Head))
}

// Tail mocks base method.
func (m *MockEdge) Tail() model.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tail")
	ret0, _ := ret[0].(model.Key)
	return ret0
}

// Tail indicates an expected call of Tail.
func (mr *MockEdgeMockRecorder) Tail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tail", reflect.TypeOf((*MockEdge)(nil).Tail))
}

// Weight mocks base method.
func (m *MockEdge) Weight() model.Weight {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(model.Weight)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *MockEdgeMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*MockEdge)(nil).Weight))
}
